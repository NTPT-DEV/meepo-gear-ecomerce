// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  enabled       Boolean   @default(true)
  phone         String?
  address       String?
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  account       Account[]
  orders        Order[]
  carts         Cart[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  title       String
  description String
  price       Float
  quantity    Int
  category    Category        @relation("CategoryToProduct", fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String          @db.ObjectId
  cartItems   CartItem[]
  orderItems  ProductOnOrder[]
  images      Images[]
  sold        Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  image    String?
  products Product[] @relation("CategoryToProduct")
}

model Order {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  products    ProductOnOrder[]
  cartTotal   Float
  orderStatus String           @default("pending")
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String           @db.ObjectId
  createAt    DateTime         @default(now())
  updateAt    DateTime         @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  products  CartItem[]
  cartTotal Float
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String  @db.ObjectId
  quantity  Int
  price     Float
}

model ProductOnOrder {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @db.ObjectId
  quantity  Int
  price     Float
}

model Images {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  asset_id   String
  public_id  String
  url        String
  secure_url String
  product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String?  @db.ObjectId
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
}
